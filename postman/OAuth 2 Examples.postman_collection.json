{
	"info": {
		"_postman_id": "3a930a30-ebe0-4f5a-8f83-361942410194",
		"name": "OAuth 2 Examples",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "14329370"
	},
	"item": [
		{
			"name": "Authorization Code",
			"item": [
				{
					"name": "AS - Authorization Request  - Generate code",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 302\", function () {",
									"  pm.response.to.have.status(302);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - Redirect URL and Authorization Code\", function () {",
									"    pm.expect(pm.response).to.have.property('code');",
									"});",
									"",
									"pm.test(\"Verify that the Authorization Code is a non-empty string\", function () {",
									"  const responseData = pm.response.text();",
									"  ",
									"  pm.expect(responseData).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Authorization Code should not be empty\");",
									"});",
									"",
									"",
									"// Store the code in a variable",
									"const location = pm.response.headers.get('Location');",
									"const code = location.split('code=')[1];",
									"",
									"console.log({",
									"    code",
									"})",
									"pm.environment.set('code', code);",
									"",
									"",
									"",
									"",
									"var template = `",
									"<style type=\"text/css\">",
									"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}",
									"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}",
									"    .tftable tr {background-color:#ffffff;}",
									"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}",
									"    .tftable tr:hover {background-color:#e0ffff;}",
									"</style>",
									"",
									"<table class=\"tftable\" border=\"1\">",
									"    <tr>",
									"        <th>Redirect URL</th>",
									"        <th>Authorization Code</th>",
									"    </tr>",
									"    <tr>",
									"        <td>http://localhost:3000/callback</td>",
									"        <td>0d431668c15a48b4cdbfc3f3573edba6</td>",
									"    </tr>",
									"</table>",
									"`;",
									"",
									"function constructVisualizerPayload() {",
									"    return { response: pm.response.text() }",
									"}",
									"",
									"pm.visualizer.set(template, constructVisualizerPayload());",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/authorize?client_id=mock-client-id&redirect_uri=http://localhost:3000/callback&response_type=code",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"authorize"
							],
							"query": [
								{
									"key": "client_id",
									"value": "mock-client-id"
								},
								{
									"key": "redirect_uri",
									"value": "http://localhost:3000/callback"
								},
								{
									"key": "response_type",
									"value": "code"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "AS: Exchange Authorization Code for Access Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const data = pm.response.json()",
									"",
									"console.log({",
									"    data",
									"})",
									"",
									"pm.environment.set(\"access_token\", data?.access_token);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "authorization_code",
									"type": "text"
								},
								{
									"key": "code",
									"value": "{{code}}",
									"type": "text"
								},
								{
									"key": "redirect_uri",
									"value": "http://localhost:3000/callback",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "mock-client-id",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "mock-client-secret",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:4000/token",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Access Protected Resource",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/userinfo",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"userinfo"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "PKCE",
			"item": [
				{
					"name": "Generate PKCE Parameters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Include CryptoJS library for hashing",
									"const CryptoJS = require('crypto-js');",
									"",
									"// Generate a random code_verifier (128-character random string)",
									"const codeVerifier = Array(128)",
									"    .fill(0)",
									"    .map(() => Math.random().toString(36).charAt(2))",
									"    .join('');",
									"pm.environment.set('code_verifier', codeVerifier);",
									"",
									"// Generate the code_challenge (SHA-256 hash of code_verifier)",
									"const hash = CryptoJS.SHA256(codeVerifier);",
									"const codeChallenge = hash.toString(CryptoJS.enc.Base64)",
									"    .replace(/\\+/g, '-')",
									"    .replace(/\\//g, '_')",
									"    .replace(/=+$/, ''); // URL-safe Base64 encoding",
									"pm.environment.set('code_challenge', codeChallenge);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const location = pm.response.headers.get('Location');",
									"const code = location.split('code=')[1];",
									"",
									"console.log({",
									"    code",
									"})",
									"pm.environment.set('code', code);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/authorize?client_id=mock-client-id&redirect_uri=http://localhost:3000/callback&response_type=code&code_challenge={{code_challenge}}&code_challenge_method=S256",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"authorize"
							],
							"query": [
								{
									"key": "client_id",
									"value": "mock-client-id"
								},
								{
									"key": "redirect_uri",
									"value": "http://localhost:3000/callback"
								},
								{
									"key": "response_type",
									"value": "code"
								},
								{
									"key": "code_challenge",
									"value": "{{code_challenge}}"
								},
								{
									"key": "code_challenge_method",
									"value": "S256"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "AS: Exchange Authorization Code for Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const data = pm.response.json()",
									"",
									"console.log({",
									"    data",
									"})",
									"",
									"pm.environment.set(\"access_token\", data?.access_token);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "authorization_code",
									"type": "text"
								},
								{
									"key": "code",
									"value": "{{code}}",
									"type": "text"
								},
								{
									"key": "redirect_uri",
									"value": "http://localhost:3000/callback",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "mock-client-id",
									"type": "text"
								},
								{
									"key": "code_verifier",
									"value": "{{code_verifier}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:4000/token",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Access Protected Resource",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/userinfo",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"userinfo"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}